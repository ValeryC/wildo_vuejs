{"remainingRequest":"/Users/baloulee/Desktop/github/wildocodak/wildo_vuejs/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/baloulee/Desktop/github/wildocodak/wildo_vuejs/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/Users/baloulee/Desktop/github/wildocodak/wildo_vuejs/src/views/Home.vue","mtime":1602710100479},{"path":"/Users/baloulee/Desktop/github/wildocodak/wildo_vuejs/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1550163011167},{"path":"/Users/baloulee/Desktop/github/wildocodak/wildo_vuejs/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1602584960737},{"path":"/Users/baloulee/Desktop/github/wildocodak/wildo_vuejs/node_modules/@vue/cli-plugin-babel/node_modules/cache-loader/dist/cjs.js","mtime":1602584955578},{"path":"/Users/baloulee/Desktop/github/wildocodak/wildo_vuejs/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1602584960737}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}